<?php

namespace app\components;

// Load custom TCPDF configuration BEFORE including TCPDF
$configPath = dirname(__DIR__) . '/config/tcpdf_config.php';
if (file_exists($configPath)) {
    require_once $configPath;
}

use TCPDF;
use app\models\Invoice;
use app\models\Estimate;
use app\components\PdfHtmlGenerator;

/**
 * Custom PDF class with footer support
 */
class InvoicePDF extends TCPDF
{
    public $useCJKFont = false;
    public $headerData = null;
    public $documentType = 'INVOICE';
    
    
    /**
     * Set custom header data for repeating header
     */
    public function setCustomHeaderData($company, $config, $document = null)
    {
        $this->headerData = ['company' => $company, 'config' => $config, 'document' => $document];
        $this->documentType = $config['title'];
    }
    
    
    /**
     * Header method for repeating header on each page
     */
    public function Header()
    {
        if ($this->headerData === null || $this->getPage() == 1) {
            return;
        }

        // Set top margin to make space for the header on subsequent pages
        $this->SetTopMargin(30);
        
        $company = $this->headerData['company'];
        $config = $this->headerData['config'];
        $document = $this->headerData['document'] ?? null;
        
        // Set font for header
        try {
            if ($this->useCJKFont) {
                $this->SetFont('kozgopromedium', 'B', 9);
            } else {
                $this->SetFont('helvetica', 'B', 9);
            }
        } catch (Exception $e) {
            $this->SetFont('helvetica', 'B', 9);
        }
        
        // Draw header line at top
        $this->Line(15, 10, $this->getPageWidth() - 15, 10);
        
        // Build header text
        $headerText = $company->company_name;
        if ($document) {
            $documentNumber = '';
            if ($config['title'] === 'INVOICE' && isset($document->invoice_number)) {
                $documentNumber = $document->invoice_number;
            } elseif ($config['title'] === 'ESTIMATE' && isset($document->estimate_number)) {
                $documentNumber = $document->estimate_number;
            }
            
            if ($documentNumber) {
                $headerText .= ' - ' . $config['title'] . ' #' . $documentNumber;
            } else {
                $headerText .= ' - ' . $config['title'];
            }
        } else {
            $headerText .= ' - ' . $config['title'];
        }
        
        // Draw header text
        $this->SetXY(15, 12);
        $this->Cell(0, 6, $headerText, 0, 1, 'L');
    }
    
    // Page footer
    public function Footer() {
        // Position at 1.5 cm from bottom
        $this->SetY(-15);

        if (property_exists($this, 'company') && $this->company && $this->company->hide_footer) {
            return;
        }
        
        // Set font
        $this->SetFont('helvetica', 'I', 8);

        // Get the current Y position (which is -15 from bottom)
        $current_y = $this->GetY();

        // Draw the line at this current Y position - use exact same margins as the line
        $line_start_x = $this->lMargin;
        $line_end_x = $this->w - $this->rMargin;
        $this->Line($line_start_x, $current_y, $line_end_x, $current_y);

        // Position below the line for text
        $text_y = $current_y + 2; // 2mm below the line
        $this->SetY($text_y);

        // Check if we should show "Generated by..." text (conditional)
        $showGeneratedBy = !property_exists($this, 'company') || !$this->company || !$this->company->hide_footer;
        
        // Calculate the exact width from left margin to right margin (same as line)
        $cell_width = $line_end_x - $line_start_x;
        
        if ($showGeneratedBy) {
            // Position at left margin
            $this->SetX($line_start_x);
            
            // Create a multi-cell table to handle both texts on the same line
            // Generated by text (left side)
            $generatedByText = 'Generated by ' . (\Yii::$app->params['siteName'] ?? 'Invoice Manager');
            
            // Page number text (right side)
            $pageNumText = \Yii::t('app', 'Page').' '.$this->getAliasNumPage().'/'.$this->getAliasNbPages();
            
            // Use MultiCell to create two columns
            $this->SetX($line_start_x);
            // Left column for "Generated by" text
            $this->Cell($cell_width/2, 5, $generatedByText, 0, 0, 'L', 0, '', 0, false, true, 'T', false);
            // Right column for page number - perfectly aligned to line end
            $this->Cell($cell_width/2 + 10, 5, $pageNumText, 0, 0, 'R', 0, '', 0, false, true, 'T', false);
        } else {
            // Only page number, perfectly aligned with right edge of line
            $pageNumText = \Yii::t('app', 'Page').' '.$this->getAliasNumPage().'/'.$this->getAliasNbPages();
            
            // Position at left margin and use exact line width for perfect right alignment
            $this->SetX($line_start_x);
            $this->Cell($cell_width + 10, 5, $pageNumText, 0, 0, 'R', 0, '', 0, false, true, 'T', false);
        }
    }
}

/**
 * PDF Generator for invoices using TCPDF
 */
class TcpdfGenerator implements PdfGeneratorInterface
{
    /**
     * Set CJK font for PDF
     *
     * @param TCPDF $pdf
     */
    private static function setCJKFont($pdf)
    {
        // Try TCPDF built-in fonts that support CJK characters
        $cjkFonts = [
            'notosanskr',      // Korean font (already converted)
            'stsongstdlight',  // Simplified Chinese font (already converted)
            'kozgopromedium',  // Korean font (if available)
            'dejavusans',      // DejaVu Sans (has some CJK support)
            'freeserif',       // FreeSerif (has some CJK support)
            'cid0kr',          // CID Korean font
            'sun-exta',        // Sun Extended A font
            'arialunicid0',    // Arial Unicode MS (if available)
            'unifont',         // GNU Unifont (if available)
            'helvetica'        // Final fallback
        ];
        
        foreach ($cjkFonts as $font) {
            try {
                $pdf->SetFont($font, '', 9);
                return; // Success, stop trying other fonts
            } catch (Exception $e) {
                // Continue to next font
                continue;
            }
        }
        
        // If all CJK fonts fail, use helvetica as final fallback
        $pdf->SetFont('helvetica', '', 9);
    }

    /**
     * Generate PDF for invoice
     *
     * @param Invoice $invoice
     * @param string $mode 'D' for download, 'I' for inline, 'S' for string
     * @return mixed
     */
    public static function generateInvoicePdf(Invoice $invoice, $mode = 'I')
    {
        // Create new PDF document using custom class
        $pdf = new InvoicePDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
        $pdf->company = $invoice->company; // 이 줄을 추가하세요

        // Set CJK font preference for footer
        $pdf->useCJKFont = $invoice->company->use_cjk_font;
        
        // Set Korean language support
        $pdf->setLanguageArray(array('a_meta_charset' => 'UTF-8'));
        
        // Set Unicode font subsetting to support Korean characters
        $pdf->setFontSubsetting(true);

        // Set document information
        $pdf->SetCreator(\Yii::$app->params['siteName'] ?? 'Invoice Manager');
        $pdf->SetAuthor($invoice->company->company_name);
        $pdf->SetTitle('Invoice ' . $invoice->invoice_number);
        $pdf->SetSubject('Invoice');

        // Enable custom header and footer
        $pdf->setPrintHeader(true);
        $pdf->setPrintFooter(true);
        
        // Set header data for repeating header
        $pdf->setCustomHeaderData($invoice->company, PdfHtmlGenerator::getTemplateConfig('invoice'), $invoice);

        // Set margins - different for first page vs subsequent pages
        $pdf->SetMargins(15, 10, 15);
        
        // Set header margin for subsequent pages
        $pdf->SetHeaderMargin(25);
        
        // Set auto page break with bottom margin for footer
        $pdf->SetAutoPageBreak(true, 25);

        // Add a page
        $pdf->AddPage();

        // Set default font based on company CJK setting
        if ($invoice->company->use_cjk_font) {
            self::setCJKFont($pdf);
        } else {
            $pdf->SetFont('helvetica', '', 9);
        }

        // Generate HTML content
        $html = PdfHtmlGenerator::generateInvoiceHtml($invoice);

        // Print the HTML content
        $pdf->writeHTML($html, true, false, true, false, '');

        // Add watermark for paid invoices
        if ($invoice->status === 'paid' || $invoice->isFullyPaid()) {
            PdfHtmlGenerator::addPaidWatermark($pdf);
        }

        // Get filename
        $filename = 'Invoice_' . $invoice->invoice_number . '.pdf';

        // Output the PDF
        return $pdf->Output($filename, $mode);
    }

    /**
     * Generate PDF for estimate
     *
     * @param Estimate $estimate
     * @param string $mode 'D' for download, 'I' for inline, 'S' for string
     * @return mixed
     */
    public static function generateEstimatePdf(Estimate $estimate, $mode = 'I')
    {
        // Create new PDF document using custom class
        $pdf = new InvoicePDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
        $pdf->company = $estimate->company; // 이 줄을 추가하세요

        // Set CJK font preference for footer
        $pdf->useCJKFont = $estimate->company->use_cjk_font;
        
        // Set Korean language support
        $pdf->setLanguageArray(array('a_meta_charset' => 'UTF-8'));
        
        // Set Unicode font subsetting to support Korean characters
        $pdf->setFontSubsetting(true);

        // Set document information
        $pdf->SetCreator(\Yii::$app->params['siteName'] ?? 'Invoice Manager');
        $pdf->SetAuthor($estimate->company->company_name);
        $pdf->SetTitle('Estimate ' . $estimate->estimate_number);
        $pdf->SetSubject('Estimate');

        // Enable custom header and footer
        $pdf->setPrintHeader(true);
        $pdf->setPrintFooter(true);
        
        // Set header data for repeating header
        $pdf->setCustomHeaderData($estimate->company, PdfHtmlGenerator::getTemplateConfig('estimate'), $estimate);

        // Set margins - different for first page vs subsequent pages
        $pdf->SetMargins(15, 10, 15);
        
        // Set header margin for subsequent pages
        $pdf->SetHeaderMargin(25);
        
        // Set auto page break with bottom margin for footer
        $pdf->SetAutoPageBreak(true, 25);

        // Add a page
        $pdf->AddPage();

        // Set default font based on company CJK setting
        if ($estimate->company->use_cjk_font) {
            self::setCJKFont($pdf);
        } else {
            $pdf->SetFont('helvetica', '', 9);
        }

        // Generate HTML content
        $html = PdfHtmlGenerator::generateEstimateHtml($estimate);

        // Print the HTML content
        $pdf->writeHTML($html, true, false, true, false, '');

        // Get filename
        $filename = 'Estimate_' . $estimate->estimate_number . '.pdf';

        // Output the PDF
        return $pdf->Output($filename, $mode);
    }

    /**
     * Generate HTML content for invoice (PDF version)
     *
     * @param Invoice $invoice
     * @return string
     */
    private static function generateInvoiceHtml(Invoice $invoice)
    {
        $company = $invoice->company;
        $customer = $invoice->customer;
        $items = $invoice->invoiceItems;

        // Get template configuration
        $config = PdfHtmlGenerator::getTemplateConfig('invoice');
        
        // CSS Styles for PDF
        $css = PdfHtmlGenerator::getTemplateStyles($company->use_cjk_font, $config['color_scheme']);
        
        // HTML Content
        $html = $css;
        $html .= '<div style="page-break-inside: avoid;">';
        $html .= PdfHtmlGenerator::generateUnifiedPdfHeader($company, $config);
        $html .= PdfHtmlGenerator::generateUnifiedPdfSubHeader($customer, $invoice, $company, $config);
        $html .= PdfHtmlGenerator::generatePdfSeparator();
        $html .= '</div>';
        $html .= PdfHtmlGenerator::generatePdfItemsTable($items, $invoice);
        $html .= PdfHtmlGenerator::generatePdfTotalsSection($invoice);
        $html .= PdfHtmlGenerator::generatePdfNotes($invoice);

        return $html;
    }

    /**
     * Generate HTML content for estimate (PDF version)
     *
     * @param Estimate $estimate
     * @return string
     */
    private static function generateEstimateHtml(Estimate $estimate)
    {
        $company = $estimate->company;
        $customer = $estimate->customer;
        $items = $estimate->estimateItems;

        // Get template configuration
        $config = PdfHtmlGenerator::getTemplateConfig('estimate');
        
        // CSS Styles for PDF
        $css = PdfHtmlGenerator::getTemplateStyles($company->use_cjk_font, $config['color_scheme']);
        
        // HTML Content
        $html = $css;
        $html .= '<div style="page-break-inside: avoid;">';
        $html .= PdfHtmlGenerator::generateUnifiedPdfHeader($company, $config);
        $html .= PdfHtmlGenerator::generateUnifiedPdfSubHeader($customer, $estimate, $company, $config);
        $html .= PdfHtmlGenerator::generatePdfSeparator();
        $html .= '</div>';
        $html .= PdfHtmlGenerator::generateEstimatePdfItemsTable($items, $estimate);
        $html .= PdfHtmlGenerator::generateEstimatePdfTotalsSection($estimate);
        $html .= PdfHtmlGenerator::generateEstimatePdfNotes($estimate);

        return $html;
    }

    /**
     * Add PAID watermark to PDF
     *
     * @param TCPDF $pdf
     */
    private static function addPaidWatermark($pdf)
    {
        // Get current page number
        $pageCount = $pdf->getNumPages();
        
        // Add watermark to each page
        for ($i = 1; $i <= $pageCount; $i++) {
            $pdf->setPage($i);
            
            // Save the current graphic state
            $pdf->StartTransform();
            
            // Set the watermark text properties
            try {
                $pdf->SetFont('dejavusans', 'B', 80);
            } catch (Exception $e) {
                try {
                    $pdf->SetFont('freeserif', 'B', 80);
                } catch (Exception $e2) {
                    try {
                        $pdf->SetFont('times', 'B', 80);
                    } catch (Exception $e3) {
                        $pdf->SetFont('helvetica', 'B', 80);
                    }
                }
            }
            $pdf->SetTextColor(220, 220, 220); // Light gray color
            $pdf->SetAlpha(0.3); // Transparency
            
            // Calculate position (center of page)
            $pageWidth = $pdf->getPageWidth();
            $pageHeight = $pdf->getPageHeight();
            $x = $pageWidth / 2;
            $y = $pageHeight / 2;
            
            // Rotate text -45 degrees
            $pdf->Rotate(-45, $x, $y);
            
            // Add the PAID text
            $pdf->Text($x - 40, $y, 'PAID');
            
            // Restore the graphic state
            $pdf->StopTransform();
        }
        
        // Reset text properties
        $pdf->SetTextColor(0, 0, 0); // Black
        $pdf->SetAlpha(1); // Full opacity
    }
}