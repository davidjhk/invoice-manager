<?php

namespace app\components;

use app\models\Invoice;
use app\models\Estimate;
use app\components\PdfTemplateManager;

class PdfHtmlGenerator
{
    /**
     * Template configuration for different document types
     */
    private static $templates = [
        'invoice' => [
            'title' => 'INVOICE',
            'number_field' => 'invoice_number',
            'date_field' => 'invoice_date',
            'due_date_field' => 'due_date',
            'items_relation' => 'invoiceItems',
            'notes_fields' => ['notes'],
            'show_payments' => true,
            'show_discount' => false,
            'show_terms' => true,
            'terms_source' => 'company',
            'color_scheme' => '#667eea'
        ],
        'estimate' => [
            'title' => 'ESTIMATE',
            'number_field' => 'estimate_number',
            'date_field' => 'estimate_date',
            'due_date_field' => 'expiry_date',
            'items_relation' => 'estimateItems',
            'notes_fields' => ['customer_notes', 'payment_instructions'],
            'show_payments' => false,
            'show_discount' => true,
            'show_terms' => false,
            'terms_source' => 'document',
            'color_scheme' => '#667eea',
            'expiry_notice' => true
        ]
    ];

    /**
     * Get template configuration for document type
     *
     * @param string $type
     * @return array
     */
    public static function getTemplateConfig($type)
    {
        return self::$templates[$type] ?? self::$templates['invoice'];
    }

    /**
     * Get letter spacing style for CJK fonts
     *
     * @param bool $useCJKFont Whether CJK font is being used
     * @return string CSS letter-spacing property
     */
    public static function getCJKLetterSpacing($useCJKFont = false)
    {
        return $useCJKFont ? 'letter-spacing: 0.5px;' : '';
    }
    
    /**
     * Calculate optimal font size for company name to fit in container
     *
     * @param string $text The text to size
     * @param int $maxWidth Maximum width in pixels
     * @param int $baseFontSize Base font size
     * @param int $minFontSize Minimum font size
     * @return int Calculated font size
     */
    public static function calculateFontSize($text, $maxWidth, $baseFontSize = 24, $minFontSize = 12)
    {
        $textLength = strlen($text);
        // Conservative but not too aggressive estimation for TCPDF
        $estimatedWidth = $textLength * ($baseFontSize * 0.75); 
        
        if ($estimatedWidth > $maxWidth) {
            $fontSize = max($minFontSize, ($maxWidth / $textLength) * 1.0); // Less aggressive reduction
        } else {
            $fontSize = $baseFontSize;
        }
        
        return round($fontSize);
    }

    /**
     * Generate additional CSS for template styling in PDF
     * 
     * @param string $templateId
     * @param array $template
     * @return string
     */
    private static function generateAdditionalTemplateStyles($templateId, $template)
    {
        $css = '
        <style>
            .document-title { color: ' . $template['accent_color'] . ' !important; }
            .items-table th { background-color: ' . $template['table_header_bg'] . ' !important; color: ' . $template['table_header_color'] . ' !important; }
            .separator { border-color: ' . $template['accent_color'] . ' !important; }
            .total-row { background-color: ' . $template['secondary_color'] . ' !important; }
        ';
        
        // Special handling for Corporate template
        if ($templateId === 'corporate') {
            $css .= '
            .document-title { 
                color: white !important; 
                background-color: ' . $template['accent_color'] . ' !important;
                padding: 10px !important;
                margin: -20px -20px 15px -20px !important;
                font-weight: bold !important;
            }
            .document-details-box { 
                background-color: ' . $template['accent_color'] . ' !important;
                color: white !important;
            }
            .document-details-box td { 
                color: white !important; 
            }
            .items-table td { 
                border: 1px solid ' . $template['accent_color'] . ' !important; 
            }
            .totals-table { 
                border: 2px solid ' . $template['accent_color'] . ' !important;
            }
            .total-row { 
                background-color: ' . $template['accent_color'] . ' !important; 
                color: white !important;
            }
            ';
        }
        
        $css .= '</style>';
        return $css;
    }

    /**
     * Generate HTML content for invoice (PDF version)
     *
     * @param Invoice $invoice
     * @return string
     */
    public static function generateInvoiceHtml(Invoice $invoice)
    {
        $company = $invoice->company;
        $customer = $invoice->customer;
        $items = $invoice->invoiceItems;

        // Get template configuration
        $config = self::getTemplateConfig('invoice');
        $templateId = PdfTemplateManager::validateTemplateId($company->pdf_template ?? 'classic');
        
        // CSS Styles for PDF using selected template
        $css = PdfTemplateManager::generateTemplateStyles($templateId, $company->use_cjk_font);
        
        // Add additional CSS to ensure template styles are applied in PDF
        $template = PdfTemplateManager::getTemplate($templateId);
        if ($template) {
            $css .= self::generateAdditionalTemplateStyles($templateId, $template);
        }
        
        // HTML Content
        $html = $css;
        $html .= '<div style="page-break-inside: avoid;">';
        $html .= self::generateUnifiedPdfHeader($company, $config);
        $html .= self::generateUnifiedPdfSubHeader($customer, $invoice, $company, $config);
        $html .= self::generatePdfSeparator();
        $html .= '</div>';
        $html .= self::generatePdfItemsTable($items, $invoice);
        $html .= self::generatePdfTotalsSection($invoice);
        $html .= self::generatePdfNotes($invoice);

        return $html;
    }

    /**
     * Generate HTML content for estimate (PDF version)
     *
     * @param Estimate $estimate
     * @return string
     */
    public static function generateEstimateHtml(Estimate $estimate)
    {
        $company = $estimate->company;
        $customer = $estimate->customer;
        $items = $estimate->estimateItems;

        // Get template configuration
        $config = self::getTemplateConfig('estimate');
        $templateId = PdfTemplateManager::validateTemplateId($company->pdf_template ?? 'classic');
        
        // CSS Styles for PDF using selected template
        $css = PdfTemplateManager::generateTemplateStyles($templateId, $company->use_cjk_font);
        
        // Add additional CSS to ensure template styles are applied in PDF
        $template = PdfTemplateManager::getTemplate($templateId);
        if ($template) {
            $css .= self::generateAdditionalTemplateStyles($templateId, $template);
        }
        
        // HTML Content
        $html = $css;
        $html .= '<div style="page-break-inside: avoid;">';
        $html .= self::generateUnifiedPdfHeader($company, $config);
        $html .= self::generateUnifiedPdfSubHeader($customer, $estimate, $company, $config);
        $html .= self::generatePdfSeparator();
        $html .= '</div>';
        $html .= self::generatePdfItemsTable($items, $estimate);
        $html .= self::generateEstimatePdfTotalsSection($estimate);
        $html .= self::generateEstimatePdfNotes($estimate);

        return $html;
    }

    /**
     * Generate CSS styles for PDF based on template
     *
     * @param bool $useCJKFont Whether to use CJK fonts
     * @param string $colorScheme Primary color for the template
     * @return string
     */
    public static function getTemplateStyles($useCJKFont = false, $colorScheme = '#667eea')
    {
        $fontFamily = '"FreeSans", "DejavuSans", "Arial", sans-serif';
            
        // Add letter spacing for CJK fonts to improve readability
        $letterSpacing = $useCJKFont ? 'letter-spacing: 0.5px;' : '';
            
        return '
        <style>
            body { font-family: ' . $fontFamily . '; font-size: 9px; line-height: 1.4; ' . $letterSpacing . ' }
            p { margin: 0; padding: 5px; text-indent: 0; }
            div { text-indent: 0; }
            br { margin: 0; padding: 0; }
            * { text-indent: 0 !important; margin-left: 0 !important; }
            .address-line { display: block; text-indent: 0; margin-left: 0; }
            .header { margin-bottom: 15px; page-break-after: avoid; }
            .company-info { font-size: 10px; line-height: 1.4; text-indent: 0; ' . $letterSpacing . ' }
            .document-title { font-size: 25px; font-weight: bold; color: ' . $colorScheme . '; margin-bottom: 9px; }
            .sub-header { margin-bottom: 15px; page-break-after: avoid; }
            .sub-header-column { vertical-align: top; padding: 0 !important; margin: 0 !important; }
            .bill-to, .ship-to { background-color: transparent !important; background: none !important; padding: 0 !important; border-radius: 0 !important; text-indent: 0 !important; margin: 0 !important; }
            .document-details-box { padding: 0; border-radius: 0; text-indent: 0; margin: 0; }
            .document-details-box table { width: 100%; border-collapse: collapse; margin: 0; padding: 0; }
            .document-details-box td { padding: 13px 0; font-size: 9px; text-indent: 0; margin: 0; }
            .separator { border-top: 3px solid ' . $colorScheme . '; margin: 15px 0; height: 0; page-break-after: avoid; }
            .items-table { width: 100%; border-collapse: collapse; margin: 15px 0; page-break-before: avoid; page-break-inside: avoid; }
            .items-table th { background-color: ' . $colorScheme . '; color: white; padding: 12px; text-align: left; font-size: 10px; font-weight: bold; page-break-after: avoid; }
            .items-table td { padding: 12px 8px; border-bottom: 1px solid #eee; font-size: 9px; vertical-align: top; line-height: 1.6; letter-spacing: 0.3px; ' . $letterSpacing . ' }
            .items-table .text-center { text-align: center; }
            .items-table .text-right { text-align: right; }
            .amount { text-align: right; }
            .totals { margin-top: 15px; page-break-inside: avoid; }
            .totals-table { border-collapse: collapse; page-break-inside: avoid; }
            .totals-table td { padding: 8px 11px; font-size: 9px; border-bottom: 1px solid #eee; ' . $letterSpacing . ' }
            .totals-table .text-right { text-align: right; }
            .total-row { font-weight: bold; font-size: 11px; background-color: #f8f9fa; }
            .paid-row { background-color: #e8f5e8; }
            .balance-row-paid { background-color: #d4edda; }
            .balance-row-unpaid { background-color: #fff3cd; }
            .notes { margin-top: 15px; padding: 15px; background-color: #f8f9fa; border-radius: 5px; page-break-inside: avoid; ' . $letterSpacing . ' }
            .logo { max-height: 15px; max-width: 90px; height: auto; }
        </style>';
    }

    /**
     * Backward compatibility method
     *
     * @param bool $useCJKFont
     * @return string
     */
    public static function getPdfStyles($useCJKFont = false)
    {
        return self::getTemplateStyles($useCJKFont, '#667eea');
    }

    /**
     * Generate unified PDF header section
     *
     * @param $company
     * @param array $config Template configuration
     * @return string
     */
    public static function generateUnifiedPdfHeader($company, $config)
    {
        $html = '
        <!-- Header -->
        <div class="header">
            <table width="100%">
                <tr>
                    <td width="35%" class="company-info">
                        <div class="document-title">' . $config['title'] . '</div>
                        <strong>' . htmlspecialchars($company->company_name) . '</strong><br>';
        
        // Process company address line by line
        if ($company->company_address) {
            $addressLines = explode("\n", $company->company_address);
            foreach ($addressLines as $line) {
                $line = trim($line);
                if (!empty($line)) {
                    $html .= htmlspecialchars($line) . '<br>';
                }
            }
        }
        
        // Add company location information (city, state, zip code)
        $companyLocationParts = [];
        if ($company->city) $companyLocationParts[] = $company->city;
        if ($company->state) $companyLocationParts[] = $company->state;
        if ($company->zip_code) $companyLocationParts[] = $company->zip_code;
        if (!empty($companyLocationParts)) {
            $html .= htmlspecialchars(implode(', ', $companyLocationParts)) . '<br>';
        }
        if ($company->country && $company->country !== 'US') {
            $html .= htmlspecialchars($company->country) . '<br>';
        }

        if ($company->company_phone) {
            $html .= 'Phone: ' . htmlspecialchars($company->company_phone) . '<br>';
        }
        if ($company->company_email) {
            $html .= 'Email: ' . htmlspecialchars($company->company_email) . '<br>';
        }

        $html .= '
                    </td>
                    <td width="20%">&nbsp;</td>
                    <td width="45%" style="text-align: right; vertical-align: top;">';

        // Add logo if exists, otherwise show company name in large font
        if ($company->hasLogo()) {
            $logoPath = $company->getLogoAbsolutePath();
            if ($logoPath && file_exists($logoPath)) {
                // Get image dimensions
                $imageInfo = getimagesize($logoPath);
                if ($imageInfo) {
                    $originalWidth = $imageInfo[0];
                    $originalHeight = $imageInfo[1];
                    
                    // Calculate new dimensions with max height of 120px and max width of 45% of page width
                    $maxHeight = 120;
                    // Page width is approximately 595px for A4, so 45% is about 268px
                    $maxWidth = 268;
                    
                    $ratio = min($maxHeight / $originalHeight, $maxWidth / $originalWidth);
                    $newWidth = $originalWidth * $ratio;
                    $newHeight = $originalHeight * $ratio;
                    
                    $html .= '<img src="' . $logoPath . '" width="' . $newWidth . '" height="' . $newHeight . '" alt="Company Logo" style="vertical-align: top;">';
                } else {
                    // Fallback with 45% page width limit
                    $html .= '<img src="' . $logoPath . '" width="268" height="120" alt="Company Logo" style="vertical-align: top;">';
                }
            }
        } else {
            // No logo - display company name in large font with dynamic sizing
            $companyName = htmlspecialchars($company->company_name);
            $maxWidth = 268; // Max width in pixels (45% of A4 page width)
            $fontSize = self::calculateFontSize($company->company_name, $maxWidth, 20, 12); // Better balance
            
            // Replace spaces with non-breaking spaces to prevent line breaks
            $companyNameNoBreak = str_replace(' ', '&nbsp;', $companyName);
            
            // Better positioned and sized company name display with top alignment
            $html .= '<div style="font-size: ' . $fontSize . 'px; font-weight: bold; color: ' . $config['color_scheme'] . '; margin-bottom: 10px; text-align: right; white-space: nowrap; max-width: ' . $maxWidth . 'px; line-height: 1.2; vertical-align: top;">' . $companyNameNoBreak . '</div>';
        }

        $html .= '
                    </td>
                </tr>
            </table>
        </div>';

        return $html;
    }

    /**
     * Legacy PDF header method for backward compatibility
     *
     * @param $company
     * @return string
     */
    public static function generatePdfHeader($company)
    {
        return self::generateUnifiedPdfHeader($company, self::getTemplateConfig('invoice'));
    }

    /**
     * Generate unified PDF sub-header section
     *
     * @param $customer
     * @param $document
     * @param $company
     * @param array $config Template configuration
     * @return string
     */
    public static function generateUnifiedPdfSubHeader($customer, $document, $company, $config)
    {
        $html = '
        <!-- Sub Header with 3 columns -->
        <div class="sub-header">
            <table width="100%">
                <tr>
                    <td width="33%" style="vertical-align: top; padding: 0;">
                        <div style="background: none; padding: 0; margin: 0;">
                            <strong>Bill To:</strong><br>
                            <strong>' . htmlspecialchars($customer->customer_name) . '</strong><br>';
        // Process customer billing address using structured fields first, then fallback to address field
        if ($customer->customer_address) {
            $addressLines = explode("\n", $customer->customer_address);
            foreach ($addressLines as $line) {
                $line = trim($line);
                if (!empty($line)) {
                    $html .= htmlspecialchars($line) . '<br>';
                }
            }
        }
        // Add structured location information
        $locationParts = [];
        if ($customer->city) $locationParts[] = $customer->city;
        if ($customer->state) $locationParts[] = $customer->state;
        if ($customer->zip_code) $locationParts[] = $customer->zip_code;
        if (!empty($locationParts)) {
            $html .= htmlspecialchars(implode(', ', $locationParts)) . '<br>';
        }
        if ($customer->country && $customer->country !== 'US') {
            $html .= htmlspecialchars($customer->country) . '<br>';
        }
        if ($customer->customer_phone) {
            $html .= 'Phone: ' . htmlspecialchars($customer->customer_phone) . '<br>';
        }
        if ($customer->customer_fax && $config['title'] === 'INVOICE') {
            $html .= 'Fax: ' . htmlspecialchars($customer->customer_fax) . '<br>';
        }
        if ($customer->customer_mobile && $config['title'] === 'INVOICE') {
            $html .= 'Mobile: ' . htmlspecialchars($customer->customer_mobile) . '<br>';
        }
        if ($customer->customer_email) {
            $html .= 'Email: ' . htmlspecialchars($customer->customer_email) . '<br>';
        }

        $html .= '
                        </div>
                    </td>
                    <td width="33%" style="vertical-align: top; padding: 0;">
                        <div style="background: none; padding: 0; margin: 0;">
                            <strong>Ship To:</strong><br>';
        
        // Handle shipping address based on document type
        if ($config['title'] === 'ESTIMATE' && isset($document->ship_to_address) && $document->ship_to_address) {
            $shipLines = explode("\n", $document->ship_to_address);
            foreach ($shipLines as $line) {
                $line = trim($line);
                if (!empty($line)) {
                    $html .= htmlspecialchars($line) . '<br>';
                }
            }
        } else {
            $html .= '<strong>' . htmlspecialchars($customer->customer_name) . '</strong><br>';
            if ($customer->customer_address) {
                $addressLines = explode("\n", $customer->customer_address);
                foreach ($addressLines as $line) {
                    $line = trim($line);
                    if (!empty($line)) {
                        $html .= htmlspecialchars($line) . '<br>';
                    }
                }
            }
            // Add structured location information
            $locationParts = [];
            if ($customer->city) $locationParts[] = $customer->city;
            if ($customer->state) $locationParts[] = $customer->state;
            if ($customer->zip_code) $locationParts[] = $customer->zip_code;
            if (!empty($locationParts)) {
                $html .= htmlspecialchars(implode(', ', $locationParts)) . '<br>';
            }
            if ($customer->country && $customer->country !== 'US') {
                $html .= htmlspecialchars($customer->country) . '<br>';
            }
        }

        $html .= '
                        </div>
                    </td>
                    <td width="34%" style="vertical-align: top; padding: 0;">
                        <div style="background: none; padding: 0; margin: 0;">
                            <table>
                                <tr>
                                    <td><strong>' . ucfirst($config['title']) . ' #:</strong></td>
                                    <td>' . htmlspecialchars($document->{$config['number_field']}) . '</td>
                                </tr>
                                <tr>
                                    <td><strong>Date:</strong></td>
                                    <td>' . date('F j, Y', strtotime($document->{$config['date_field']})) . '</td>
                                </tr>';

        if ($document->{$config['due_date_field']}) {
            $dueDateLabel = $config['title'] === 'INVOICE' ? 'Due Date' : 'Expiry Date';
            $html .= '
                                <tr>
                                    <td><strong>' . $dueDateLabel . ':</strong></td>
                                    <td>' . date('F j, Y', strtotime($document->{$config['due_date_field']})) . '</td>
                                </tr>';
        }

        if ($config['show_terms']) {
            if ($config['terms_source'] === 'company') {
                $html .= '
                                <tr>
                                    <td><strong>Terms:</strong></td>
                                    <td>Net ' . $company->due_date_days . ' Days</td>
                                </tr>';
            } elseif ($config['terms_source'] === 'document' && isset($document->terms) && $document->terms) {
                $html .= '
                                <tr>
                                    <td><strong>Terms:</strong></td>
                                    <td>' . htmlspecialchars($document->terms) . '</td>
                                </tr>';
            }
        }

        $html .= '
                            </table>
                        </div>
                    </td>
                </tr>
            </table>
        </div>';

        return $html;
    }

    /**
     * Legacy PDF sub-header method for backward compatibility
     *
     * @param $customer
     * @param $invoice
     * @return string
     */
    public static function generatePdfSubHeader($customer, $invoice, $company)
    {
        return self::generateUnifiedPdfSubHeader($customer, $invoice, $company, self::getTemplateConfig('invoice'));
    }


    /**
     * Generate PDF separator
     *
     * @return string
     */
    public static function generatePdfSeparator()
    {
        return '
        <!-- Separator -->
        <div class="separator"></div>';
    }

    /**
     * Generate PDF items table
     *
     * @param $items
     * @param $invoice
     * @return string
     */
    public static function generatePdfItemsTable($items, $invoice)
    {
        $html = '
        <table class="items-table" cellpadding="8" cellspacing="0">
            <thead>
                <tr>
                    <th style="width: 64%;">Description</th>
                    <th style="width: 8%; text-align: right;">Qty</th>
                    <th style="width: 14%; text-align: right;">Rate</th>
                    <th style="width: 14%; text-align: right;">Amount</th>
                </tr>
            </thead>
            <tbody>';

        foreach ($items as $item) {
            $description = '';
            
            // Add Product/Service name if exists
            if (!empty($item->product_service_name)) {
                $description .= '<strong>' . htmlspecialchars($item->product_service_name) . '</strong>';
                if (!empty($item->description)) {
                    $description .= '<br>' . nl2br(htmlspecialchars($item->description));
                }
            } else if (!empty($item->description)) {
                $description = nl2br(htmlspecialchars($item->description));
            }
            
            $html .= '
                <tr>
                    <td style="width:64%;">' . $description . '</td>
                    <td style="width:8%;text-align: right;">&nbsp;' . $item->getFormattedQuantity() . '&nbsp;</td>
                    <td style="width:14%;text-align: right;">&nbsp;' . $invoice->formatAmount($item->rate) . '&nbsp;</td>
                    <td style="width:14%;text-align: right;">&nbsp;' . $invoice->formatAmount($item->amount) . '&nbsp;</td>
                </tr>';
        }

        $html .= '
            </tbody>
        </table>';

        return $html;
    }

    /**
     * Generate PDF totals section
     *
     * @param $invoice
     * @return string
     */
    public static function generatePdfTotalsSection($invoice)
    {
        $html = '
        <div class="totals">
            <table width="100%">
                <tr>
                    <td width="60%">&nbsp;</td>
                    <td width="40%">
                        <table class="totals-table" width="100%" cellpadding="6" cellspacing="0">
                <tr>
                    <td>&nbsp;<strong>Subtotal:</strong>&nbsp;</td>
                    <td style="text-align: right;">&nbsp;' . $invoice->formatAmount($invoice->subtotal) . '&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;<strong>Tax (' . number_format($invoice->tax_rate, 1) . '%):</strong>&nbsp;</td>
                    <td style="text-align: right;">&nbsp;' . $invoice->formatAmount($invoice->tax_amount) . '&nbsp;</td>
                </tr>';
                
        // Add shipping fee if exists
        if ($invoice->shipping_fee > 0) {
            $html .= '
                <tr>
                    <td>&nbsp;<strong>Shipping Fee:</strong>&nbsp;</td>
                    <td style="text-align: right;">&nbsp;' . $invoice->formatAmount($invoice->shipping_fee) . '&nbsp;</td>
                </tr>';
        }
        
        $html .= '
                <tr class="total-row">
                    <td>&nbsp;<strong>TOTAL:</strong>&nbsp;</td>
                    <td style="text-align: right; font-size: 11px;">&nbsp;' . $invoice->formatAmount($invoice->total_amount) . '&nbsp;</td>
                </tr>';

        // Add payment information if any payments exist
        $totalPaid = $invoice->getTotalPaidAmount();
        if ($totalPaid > 0) {
            $html .= '
                <tr style="background-color: #e8f5e8;">
                    <td>&nbsp;<strong>PAID:</strong>&nbsp;</td>
                    <td style="text-align: right; color: #28a745; font-weight: bold;">&nbsp;-' . $invoice->formatAmount($totalPaid) . '&nbsp;</td>
                </tr>';
        }

        $remainingBalance = $invoice->getRemainingBalance();
        if ($totalPaid > 0) {
            $balanceRowClass = $remainingBalance > 0 ? 'style="background-color: #fff3cd;"' : 'style="background-color: #d4edda;"';
            $balanceColor = $remainingBalance > 0 ? 'color: #856404;' : 'color: #155724;';
            $html .= '
                <tr ' . $balanceRowClass . '>
                    <td>&nbsp;<strong>BALANCE DUE:</strong>&nbsp;</td>
                    <td style="text-align: right; font-size: 11px; font-weight: bold; ' . $balanceColor . '">&nbsp;' . $invoice->formatAmount($remainingBalance) . '&nbsp;</td>
                </tr>';
        }

        $html .= '
                        </table>
                    </td>
                </tr>
            </table>
        </div>';

        return $html;
    }

    /**
     * Generate PDF notes section
     *
     * @param $invoice
     * @return string
     */
    public static function generatePdfNotes($invoice)
    {
        if ($invoice->notes) {
            return '
        <div class="notes">
            <strong>Notes:</strong><br>
            ' . nl2br(htmlspecialchars($invoice->notes)) . '
        </div>';
        }
        return '';
    }

    /**
     * Generate PDF totals section for estimate
     *
     * @param $estimate
     * @return string
     */
    public static function generateEstimatePdfTotalsSection($estimate)
    {
        $html = '
        <div class="totals">
            <table width="100%">
                <tr>
                    <td width="60%">&nbsp;</td>
                    <td width="40%">
                        <table class="totals-table" width="100%" cellpadding="6" cellspacing="0">
                <tr>
                    <td>&nbsp;<strong>Subtotal:</strong>&nbsp;</td>
                    <td style="text-align: right;">&nbsp;' . $estimate->formatAmount($estimate->subtotal) . '&nbsp;</td>
                </tr>';

        // Add discount if exists
        if ($estimate->discount_amount > 0) {
            $discountLabel = $estimate->discount_type == 'percentage' ? 
                'Discount (' . $estimate->discount_value . '%):' : 
                'Discount (Fixed):';
            $html .= '
                <tr>
                    <td>&nbsp;<strong>' . $discountLabel . '</strong>&nbsp;</td>
                    <td style="text-align: right; color: #dc3545;">&nbsp;-' . $estimate->formatAmount($estimate->discount_amount) . '&nbsp;</td>
                </tr>';
        }

        // Add tax if exists
        if ($estimate->tax_amount > 0) {
            $html .= '
                <tr>
                    <td>&nbsp;<strong>Tax (' . number_format($estimate->tax_rate, 1) . '%):</strong>&nbsp;</td>
                    <td style="text-align: right;">&nbsp;' . $estimate->formatAmount($estimate->tax_amount) . '&nbsp;</td>
                </tr>';
        }
        
        // Add shipping fee if exists
        if ($estimate->shipping_fee > 0) {
            $html .= '
                <tr>
                    <td>&nbsp;<strong>Shipping Fee:</strong>&nbsp;</td>
                    <td style="text-align: right;">&nbsp;' . $estimate->formatAmount($estimate->shipping_fee) . '&nbsp;</td>
                </tr>';
        }

        $html .= '
                <tr class="total-row">
                    <td>&nbsp;<strong>TOTAL:</strong>&nbsp;</td>
                    <td style="text-align: right; font-size: 11px;">&nbsp;' . $estimate->formatAmount($estimate->total_amount) . '&nbsp;</td>
                </tr>
                        </table>
                    </td>
                </tr>
            </table>
        </div>';

        return $html;
    }

    /**
     * Generate PDF notes section for estimate
     *
     * @param $estimate
     * @return string
     */
    public static function generateEstimatePdfNotes($estimate)
    {
        $html = '';
        
        if ($estimate->customer_notes) {
            $html .= '
            <div class="notes">
                <strong>Notes:</strong><br>
                ' . nl2br(htmlspecialchars($estimate->customer_notes)) . '
            </div>';
        }
        
        if ($estimate->payment_instructions) {
            $html .= '
            <div class="notes">
                <strong>Payment Instructions:</strong><br>
                ' . nl2br(htmlspecialchars($estimate->payment_instructions)) . '
            </div>';
        }
        
        if ($estimate->expiry_date) {
            $html .= '
            <div style="margin-top: 15px; padding: 15px; background-color: #fff3cd; border-left: 4px solid #ffc107; border-radius: 4px;">
                <strong>This estimate is valid until ' . date('F j, Y', strtotime($estimate->expiry_date)) . '</strong>
            </div>';
        }
        
        return $html;
    }
}