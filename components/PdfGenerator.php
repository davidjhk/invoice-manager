<?php

namespace app\components;

use TCPDF;
use app\models\Invoice;
use app\models\Estimate;

/**
 * Custom PDF class with footer support
 */
class InvoicePDF extends TCPDF
{
    public $useCJKFont = false;
    
    public function Footer()
    {
        // Position at 15 mm from bottom
        $this->SetY(-15);
        
        // Set font with Korean support - Reliable sans-serif fallback
        if ($this->useCJKFont) {
            $fonts = ['kozgopromedium', 'dejavusans', 'freeserif', 'cid0kr', 'sun-exta', 'helvetica', 'times'];
        } else {
            $fonts = ['kozgopromedium', 'dejavusans', 'freesans', 'cid0kr', 'helvetica', 'times'];
        }
        $fontSet = false;
        
        foreach ($fonts as $font) {
            try {
                $this->SetFont($font, '', 8);
                $fontSet = true;
                break;
            } catch (Exception $e) {
                // Continue to next font
                continue;
            }
        }
        
        if (!$fontSet) {
            // Emergency fallback
            $this->SetFont('helvetica', '', 8);
        }
        $this->SetTextColor(102, 102, 102); // Gray color
        
        // Add top border line
        $this->Line(15, $this->GetY() - 5, $this->getPageWidth() - 15, $this->GetY() - 5);
        
        // Add footer text
        $footerText = 'Generated by ' . (\Yii::$app->params['siteName'] ?? 'Invoice Manager') . ' on ' . date('F j, Y \a\t g:i A');
        $this->Cell(0, 10, $footerText, 0, 1, 'C');
    }
}

/**
 * PDF Generator for invoices using TCPDF
 */
class PdfGenerator
{
    /**
     * Set CJK font for PDF
     *
     * @param TCPDF $pdf
     */
    private static function setCJKFont($pdf)
    {
        // Try to register and use Noto Sans CJK font from file
        try {
            $fontPath = dirname(__FILE__) . '/../fonts/tcpdf-fonts/NotoSansCJK-Medium.ttc';
            if (file_exists($fontPath)) {
                $fontname = \TCPDF_FONTS::addTTFfont($fontPath, 'TrueTypeUnicode', '', 96);
                if ($fontname) {
                    $pdf->SetFont($fontname, '', 9);
                    return;
                }
            }
        } catch (Exception $e) {
            // Log the error but continue to fallback fonts
            \Yii::error('Failed to load custom CJK font: ' . $e->getMessage(), __METHOD__);
        }
        
        // Try TCPDF built-in fonts that support CJK characters
        $cjkFonts = [
            'kozgopromedium',  // Korean font (if available)
            'dejavusans',      // DejaVu Sans (has some CJK support)
            'freeserif',       // FreeSerif (has some CJK support)
            'cid0kr',          // CID Korean font
            'sun-exta',        // Sun Extended A font
            'arialunicid0',    // Arial Unicode MS (if available)
            'unifont',         // GNU Unifont (if available)
            'helvetica'        // Final fallback
        ];
        
        foreach ($cjkFonts as $font) {
            try {
                $pdf->SetFont($font, '', 9);
                return; // Success, stop trying other fonts
            } catch (Exception $e) {
                // Continue to next font
                continue;
            }
        }
        
        // If all CJK fonts fail, use helvetica as final fallback
        $pdf->SetFont('helvetica', '', 9);
    }

    /**
     * Generate PDF for invoice
     *
     * @param Invoice $invoice
     * @param string $mode 'D' for download, 'I' for inline, 'S' for string
     * @return mixed
     */
    public static function generateInvoicePdf(Invoice $invoice, $mode = 'I')
    {
        // Create new PDF document using custom class
        $pdf = new InvoicePDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
        
        // Set CJK font preference for footer
        $pdf->useCJKFont = $invoice->company->use_cjk_font;
        
        // Set Korean language support
        $pdf->setLanguageArray(array('a_meta_charset' => 'UTF-8'));
        
        // Set Unicode font subsetting to support Korean characters
        $pdf->setFontSubsetting(true);

        // Set document information
        $pdf->SetCreator(\Yii::$app->params['siteName'] ?? 'Invoice Manager');
        $pdf->SetAuthor($invoice->company->company_name);
        $pdf->SetTitle('Invoice ' . $invoice->invoice_number);
        $pdf->SetSubject('Invoice');

        // Remove default header but enable custom footer
        $pdf->setPrintHeader(false);
        $pdf->setPrintFooter(true);

        // Set margins (top, left, right)
        $pdf->SetMargins(15, 15, 15);
        
        // Set auto page break with bottom margin for footer
        $pdf->SetAutoPageBreak(true, 25);

        // Add a page
        $pdf->AddPage();

        // Set default font based on company CJK setting
        if ($invoice->company->use_cjk_font) {
            self::setCJKFont($pdf);
        } else {
            $pdf->SetFont('helvetica', '', 9);
        }

        // Generate HTML content
        $html = self::generateInvoiceHtml($invoice);

        // Print the HTML content
        $pdf->writeHTML($html, true, false, true, false, '');

        // Add watermark for paid invoices
        if ($invoice->status === 'paid' || $invoice->isFullyPaid()) {
            self::addPaidWatermark($pdf);
        }

        // Get filename
        $filename = 'Invoice_' . $invoice->invoice_number . '.pdf';

        // Output the PDF
        return $pdf->Output($filename, $mode);
    }

    /**
     * Generate HTML content for invoice (PDF version)
     *
     * @param Invoice $invoice
     * @return string
     */
    private static function generateInvoiceHtml(Invoice $invoice)
    {
        $company = $invoice->company;
        $customer = $invoice->customer;
        $items = $invoice->invoiceItems;

        // CSS Styles for PDF
        $css = self::getPdfStyles($company->use_cjk_font);
        
        // HTML Content
        $html = $css;
        $html .= self::generatePdfHeader($company);
        $html .= self::generatePdfSubHeader($customer, $invoice, $company);
        $html .= self::generatePdfSeparator();
        $html .= self::generatePdfItemsTable($items, $invoice);
        $html .= self::generatePdfTotalsSection($invoice);
        $html .= self::generatePdfNotes($invoice);

        return $html;
    }

    /**
     * Generate CSS styles for PDF
     *
     * @param bool $useCJKFont Whether to use CJK fonts
     * @return string
     */
    private static function getPdfStyles($useCJKFont = false)
    {
        $fontFamily = $useCJKFont ? 
            '"kozgopromedium", "DejaVu Sans", "FreeSerif", "Times", sans-serif' :
            '"DejaVu Sans", "FreeSerif", "Times", sans-serif';
            
        return '
        <style>
            body { font-family: ' . $fontFamily . '; font-size: 9px; line-height: 1.4; }
            p { margin: 0; padding: 5px; text-indent: 0; }
            div { text-indent: 0; }
            br { margin: 0; padding: 0; }
            * { text-indent: 0 !important; margin-left: 0 !important; }
            .address-line { display: block; text-indent: 0; margin-left: 0; }
            .header { margin-bottom: 18px; }
            .company-info { font-size: 11px; line-height: 1.4; text-indent: 0; }
            .invoice-title { font-size: 25px; font-weight: bold; color: #667eea; margin-bottom: 9px; }
            .sub-header { margin-bottom: 18px; }
            .sub-header-column { vertical-align: top; padding: 0 !important; margin: 0 !important; }
            .bill-to, .ship-to { background-color: transparent !important; background: none !important; padding: 0 !important; border-radius: 0 !important; text-indent: 0 !important; margin: 0 !important; }
            .invoice-details-box { padding: 0; border-radius: 0; text-indent: 0; margin: 0; }
            .invoice-details-box table { width: 100%; border-collapse: collapse; margin: 0; padding: 0; }
            .invoice-details-box td { padding: 13px 0; font-size: 9px; text-indent: 0; margin: 0; }
            .separator { border-top: 3px solid #667eea; margin: 18px 0; height: 0; }
            .items-table { width: 100%; border-collapse: collapse; margin: 18px 0; }
            .items-table th { background-color: #667eea; color: white; padding: 20px; text-align: left; font-size: 10px; font-weight: bold; }
            .items-table td { padding: 20px 11px; border-bottom: 1px solid #eee; font-size: 9px; vertical-align: top; }
            .items-table .text-center { text-align: center; }
            .items-table .text-right { text-align: right; }
            .amount { text-align: right; }
            .totals { margin-top: 27px; }
            .totals-table { border-collapse: collapse; }
            .totals-table td { padding: 120px 11px; font-size: 9px; border-bottom: 1px solid #eee; }
            .totals-table .text-right { text-align: right; }
            .total-row { font-weight: bold; font-size: 11px; background-color: #f8f9fa; }
            .paid-row { background-color: #e8f5e8; }
            .balance-row-paid { background-color: #d4edda; }
            .balance-row-unpaid { background-color: #fff3cd; }
            .notes { margin-top: 27px; padding: 20px; background-color: #f8f9fa; border-radius: 5px; }
            .logo { max-height: 15px; max-width: 90px; height: auto; }
        </style>';
    }

    /**
     * Generate PDF header section
     *
     * @param $company
     * @return string
     */
    private static function generatePdfHeader($company)
    {
        $html = '
        <!-- Header -->
        <div class="header">
            <table width="100%">
                <tr>
                    <td width="40%" class="company-info">
                        <div class="invoice-title">INVOICE</div>
                        <strong>' . htmlspecialchars($company->company_name) . '</strong><br>';
        
        // Process company address line by line
        if ($company->company_address) {
            $addressLines = explode("\n", $company->company_address);
            foreach ($addressLines as $line) {
                $line = trim($line);
                if (!empty($line)) {
                    $html .= htmlspecialchars($line) . '<br>';
                }
            }
        }

        if ($company->company_phone) {
            $html .= 'Phone: ' . htmlspecialchars($company->company_phone) . '<br>';
        }
        if ($company->company_email) {
            $html .= 'Email: ' . htmlspecialchars($company->company_email) . '<br>';
        }

        $html .= '
                    </td>
                    <td width="20%">&nbsp;</td>
                    <td width="40%" style="text-align: right;">';

        // Add logo if exists
        if ($company->hasLogo()) {
            $logoPath = $company->getLogoAbsolutePath();
            if ($logoPath && file_exists($logoPath)) {
                // Get image dimensions
                $imageInfo = getimagesize($logoPath);
                if ($imageInfo) {
                    $originalWidth = $imageInfo[0];
                    $originalHeight = $imageInfo[1];
                    
                    // Calculate new dimensions with max height of 120px (15px * 8)
                    $maxHeight = 120;
                    $maxWidth = 720;
                    
                    $ratio = min($maxHeight / $originalHeight, $maxWidth / $originalWidth);
                    $newWidth = $originalWidth * $ratio;
                    $newHeight = $originalHeight * $ratio;
                    
                    $html .= '<img src="' . $logoPath . '" width="' . $newWidth . '" height="' . $newHeight . '" alt="Company Logo">';
                } else {
                    $html .= '<img src="' . $logoPath . '" width="720" height="120" alt="Company Logo">';
                }
            }
        }

        $html .= '
                    </td>
                </tr>
            </table>
        </div>';

        return $html;
    }

    /**
     * Generate PDF sub-header section
     *
     * @param $customer
     * @param $invoice
     * @param $company
     * @return string
     */
    private static function generatePdfSubHeader($customer, $invoice, $company)
    {
        $html = '
        <!-- Sub Header with 3 columns -->
        <div class="sub-header">
            <table width="100%">
                <tr>
                    <td width="33%" style="vertical-align: top; padding: 0;">
                        <div style="background: none; padding: 0; margin: 0;">
                            <strong>Bill To:</strong><br>
                            <strong>' . htmlspecialchars($customer->customer_name) . '</strong><br>';
        // Process customer billing address using structured fields first, then fallback to address field
        if ($customer->customer_address) {
            $addressLines = explode("\n", $customer->customer_address);
            foreach ($addressLines as $line) {
                $line = trim($line);
                if (!empty($line)) {
                    $html .= '&nbsp; '.htmlspecialchars($line) . '<br>';
                }
            }
        }
        // Add structured location information
        $locationParts = [];
        if ($customer->city) $locationParts[] = $customer->city;
        if ($customer->state) $locationParts[] = $customer->state;
        if ($customer->zip_code) $locationParts[] = $customer->zip_code;
        if (!empty($locationParts)) {
            $html .= '&nbsp; ' . htmlspecialchars(implode(', ', $locationParts)) . '<br>';
        }
        if ($customer->country && $customer->country !== 'US') {
            $html .= '&nbsp; ' . htmlspecialchars($customer->country) . '<br>';
        }
        if ($customer->customer_phone) {
            $html .= '&nbsp; Phone: ' . htmlspecialchars($customer->customer_phone) . '<br>';
        }
        if ($customer->customer_fax) {
            $html .= '&nbsp; Fax: ' . htmlspecialchars($customer->customer_fax) . '<br>';
        }
        if ($customer->customer_mobile) {
            $html .= '&nbsp; Mobile: ' . htmlspecialchars($customer->customer_mobile) . '<br>';
        }
        if ($customer->customer_email) {
            $html .= '&nbsp; Email: ' . htmlspecialchars($customer->customer_email) . '<br>';
        }

        $html .= '
                        </div>
                    </td>
                    <td width="33%" style="vertical-align: top; padding: 0;">
                        <div style="background: none; padding: 0; margin: 0;">
                            <strong>Ship To:</strong><br>
                            <strong>' . htmlspecialchars($customer->customer_name) . '</strong><br>';
        // Process customer shipping address using structured fields first, then fallback to address field
        if ($customer->customer_address) {
            $addressLines = explode("\n", $customer->customer_address);
            foreach ($addressLines as $line) {
                $line = trim($line);
                if (!empty($line)) {
                    $html .= '&nbsp; '.htmlspecialchars($line) . '<br>';
                }
            }
        }
        // Add structured location information
        $locationParts = [];
        if ($customer->city) $locationParts[] = $customer->city;
        if ($customer->state) $locationParts[] = $customer->state;
        if ($customer->zip_code) $locationParts[] = $customer->zip_code;
        if (!empty($locationParts)) {
            $html .= '&nbsp; ' . htmlspecialchars(implode(', ', $locationParts)) . '<br>';
        }
        if ($customer->country && $customer->country !== 'US') {
            $html .= '&nbsp; ' . htmlspecialchars($customer->country) . '<br>';
        }

        $html .= '
                        </div>
                    </td>
                    <td width="34%" style="vertical-align: top; padding: 0;">
                        <div style="background: none; padding: 0; margin: 0;">
                            <table>
                                <tr>
                                    <td><strong>Invoice #:</strong></td>
                                    <td>' . htmlspecialchars($invoice->invoice_number) . '</td>
                                </tr>
                                <tr>
                                    <td><strong>Date:</strong></td>
                                    <td>' . date('F j, Y', strtotime($invoice->invoice_date)) . '</td>
                                </tr>';

        if ($invoice->due_date) {
            $html .= '
                                <tr>
                                    <td><strong>Due Date:</strong></td>
                                    <td>' . date('F j, Y', strtotime($invoice->due_date)) . '</td>
                                </tr>';
        }

        $html .= '
                                <tr>
                                    <td><strong>Terms:</strong></td>
                                    <td>Net ' . $company->due_date_days . ' Days</td>
                                </tr>
                            </table>
                        </div>
                    </td>
                </tr>
            </table>
        </div>';

        return $html;
    }

    /**
     * Generate PDF separator
     *
     * @return string
     */
    private static function generatePdfSeparator()
    {
        return '
        <!-- Separator -->
        <div class="separator"></div>';
    }

    /**
     * Generate PDF items table
     *
     * @param $items
     * @param $invoice
     * @return string
     */
    private static function generatePdfItemsTable($items, $invoice)
    {
        $html = '
        <table class="items-table" cellpadding="8" cellspacing="0">
            <thead>
                <tr>
                    <th style="width: 50%;">Description</th>
                    <th style="width: 15%; text-align: right;">Quantity</th>
                    <th style="width: 17.5%; text-align: right;">Rate</th>
                    <th style="width: 17.5%; text-align: right;">Amount</th>
                </tr>
            </thead>
            <tbody>';

        foreach ($items as $item) {
            $description = '';
            
            // Add Product/Service name if exists
            if (!empty($item->product_service_name)) {
                $description .= '<span style="font-family: kozgopromedium, DejaVu Sans, FreeSerif;"><strong>' . htmlspecialchars($item->product_service_name) . '</strong></span>';
                if (!empty($item->description)) {
                    $description .= '<br><span style="font-family: kozgopromedium, DejaVu Sans, FreeSerif;">' . htmlspecialchars($item->description) . '</span>';
                }
            } else if (!empty($item->description)) {
                $description = '<span style="font-family: kozgopromedium, DejaVu Sans, FreeSerif;">' . htmlspecialchars($item->description) . '</span>';
            }
            
            $html .= '
                <tr>
                    <td style="width:50%;">&nbsp;' . $description . '&nbsp;</td>
                    <td style="width:15%;text-align: right;">&nbsp;' . $item->getFormattedQuantity() . '&nbsp;</td>
                    <td style="width:17.5%;text-align: right;">&nbsp;' . $invoice->formatAmount($item->rate) . '&nbsp;</td>
                    <td style="width:17.5%;text-align: right;">&nbsp;' . $invoice->formatAmount($item->amount) . '&nbsp;</td>
                </tr>';
        }

        $html .= '
            </tbody>
        </table>';

        return $html;
    }

    /**
     * Generate PDF totals section
     *
     * @param $invoice
     * @return string
     */
    private static function generatePdfTotalsSection($invoice)
    {
        $html = '
        <div class="totals">
            <table width="100%">
                <tr>
                    <td width="60%">&nbsp;</td>
                    <td width="40%">
                        <table class="totals-table" width="100%" cellpadding="6" cellspacing="0">
                <tr>
                    <td>&nbsp;<strong>Subtotal:</strong>&nbsp;</td>
                    <td style="text-align: right;">&nbsp;' . $invoice->formatAmount($invoice->subtotal) . '&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;<strong>Tax (' . number_format($invoice->tax_rate, 1) . '%):</strong>&nbsp;</td>
                    <td style="text-align: right;">&nbsp;' . $invoice->formatAmount($invoice->tax_amount) . '&nbsp;</td>
                </tr>
                <tr class="total-row">
                    <td>&nbsp;<strong>TOTAL:</strong>&nbsp;</td>
                    <td style="text-align: right; font-size: 11px;">&nbsp;' . $invoice->formatAmount($invoice->total_amount) . '&nbsp;</td>
                </tr>';

        // Add payment information if any payments exist
        $totalPaid = $invoice->getTotalPaidAmount();
        if ($totalPaid > 0) {
            $html .= '
                <tr style="background-color: #e8f5e8;">
                    <td>&nbsp;<strong>PAID:</strong>&nbsp;</td>
                    <td style="text-align: right; color: #28a745; font-weight: bold;">&nbsp;-' . $invoice->formatAmount($totalPaid) . '&nbsp;</td>
                </tr>';
        }

        $remainingBalance = $invoice->getRemainingBalance();
        if ($totalPaid > 0) {
            $balanceRowClass = $remainingBalance > 0 ? 'style="background-color: #fff3cd;"' : 'style="background-color: #d4edda;"';
            $balanceColor = $remainingBalance > 0 ? 'color: #856404;' : 'color: #155724;';
            $html .= '
                <tr ' . $balanceRowClass . '>
                    <td>&nbsp;<strong>BALANCE DUE:</strong>&nbsp;</td>
                    <td style="text-align: right; font-size: 11px; font-weight: bold; ' . $balanceColor . '">&nbsp;' . $invoice->formatAmount($remainingBalance) . '&nbsp;</td>
                </tr>';
        }

        $html .= '
                        </table>
                    </td>
                </tr>
            </table>
        </div>';

        return $html;
    }

    /**
     * Generate PDF notes section
     *
     * @param $invoice
     * @return string
     */
    private static function generatePdfNotes($invoice)
    {
        if ($invoice->notes) {
            return '
        <div class="notes">
            <strong>Notes:</strong><br>
            ' . nl2br(htmlspecialchars($invoice->notes)) . '
        </div>';
        }
        return '';
    }


    /**
     * Add PAID watermark to PDF
     *
     * @param TCPDF $pdf
     */
    private static function addPaidWatermark($pdf)
    {
        // Get current page number
        $pageCount = $pdf->getNumPages();
        
        // Add watermark to each page
        for ($i = 1; $i <= $pageCount; $i++) {
            $pdf->setPage($i);
            
            // Save the current graphic state
            $pdf->StartTransform();
            
            // Set the watermark text properties
            try {
                $pdf->SetFont('dejavusans', 'B', 80);
            } catch (Exception $e) {
                try {
                    $pdf->SetFont('freeserif', 'B', 80);
                } catch (Exception $e2) {
                    try {
                        $pdf->SetFont('times', 'B', 80);
                    } catch (Exception $e3) {
                        $pdf->SetFont('helvetica', 'B', 80);
                    }
                }
            }
            $pdf->SetTextColor(220, 220, 220); // Light gray color
            $pdf->SetAlpha(0.3); // Transparency
            
            // Calculate position (center of page)
            $pageWidth = $pdf->getPageWidth();
            $pageHeight = $pdf->getPageHeight();
            $x = $pageWidth / 2;
            $y = $pageHeight / 2;
            
            // Rotate text -45 degrees
            $pdf->Rotate(-45, $x, $y);
            
            // Add the PAID text
            $pdf->Text($x - 40, $y, 'PAID');
            
            // Restore the graphic state
            $pdf->StopTransform();
        }
        
        // Reset text properties
        $pdf->SetTextColor(0, 0, 0); // Black
        $pdf->SetAlpha(1); // Full opacity
    }

    /**
     * Generate invoice preview HTML (for web display)
     *
     * @param Invoice $invoice
     * @return string
     */
    public static function generateInvoicePreviewHtml(Invoice $invoice)
    {
        $company = $invoice->company;
        $customer = $invoice->customer;
        $items = $invoice->invoiceItems;

        ob_start();
        ?>
<div class="invoice-preview-container"
	style="max-width: 1000px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif; position: relative;">

	<?php echo self::getPreviewStyles(); ?>

	<?php if ($invoice->status === 'paid' || $invoice->isFullyPaid()): ?>
	<div class="paid-watermark">PAID</div>
	<?php endif; ?>

	<?php echo self::generatePreviewHeader($company); ?>
	<?php echo self::generatePreviewSubHeader($customer, $invoice, $company); ?>
	<?php echo self::generatePreviewSeparator(); ?>
	<?php echo self::generatePreviewItemsTable($items, $invoice); ?>
	<?php echo self::generatePreviewTotalsSection($invoice); ?>
	<?php echo self::generatePreviewNotes($invoice); ?>
	<?php echo self::generatePreviewFooter(); ?>

</div>
<?php
        return ob_get_clean();
    }

    /**
     * Generate CSS styles for web preview
     *
     * @return string
     */
    private static function getPreviewStyles()
    {
        return '
        <style>
            .invoice-preview-container { background: white; box-shadow: 0 0 20px rgba(0,0,0,0.1); }
            .invoice-header { margin-bottom: 20px; }
            .invoice-header table { width: 100%; border-collapse: collapse; }
            .company-info h2 { color: #667eea; margin: 0 0 10px 0; font-size: 32px; }
            .sub-header { margin-bottom: 20px; }
            .sub-header table { width: 100%; border-collapse: collapse; }
            .sub-header-column { vertical-align: top; padding: 0; width: 33.33%; }
            .bill-to, .ship-to { background: transparent; padding: 0; border-radius: 0; margin: 0; }
            .invoice-details-box { padding: 0; border-radius: 0; margin: 0; }
            .invoice-details-box table { width: 100%; border-collapse: collapse; margin: 0; padding: 0; }
            .invoice-details-box td { padding: 13px 0; text-indent: 0; margin: 0; }
            .separator { border-top: 3px solid #667eea; margin: 20px 0; }
            .items-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            .items-table th { background: #667eea; color: white; padding: 12px; text-align: left; }
            .items-table td { padding: 18px 12px; border-bottom: 1px solid #eee; }
            .items-table .text-right { text-align: right; }
            .totals-section { margin-top: 30px; }
            .totals-table { width: 350px; margin-left: auto; border-collapse: collapse; }
            .totals-table td { padding: 18px 12px; border-bottom: 1px solid #eee; }
            .total-row { background: #f8f9fa; font-weight: bold; font-size: 16px; }
            .paid-row { background: #e8f5e8 !important; }
            .balance-due-paid { background: #d4edda !important; }
            .balance-due-unpaid { background: #fff3cd !important; }
            .notes-section { margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 5px; }
            .logo { max-height: 120px; max-width: 720px; height: auto; }
            .paid-watermark {
                position: absolute; top: 50%; left: 50%;
                transform: translate(-50%, -50%) rotate(-45deg);
                font-size: 120px; font-weight: bold; color: rgba(220, 220, 220, 0.3);
                z-index: 1000; pointer-events: none; user-select: none;
            }
        </style>';
    }

    /**
     * Generate preview header section
     *
     * @param $company
     * @return string
     */
    private static function generatePreviewHeader($company)
    {
        ob_start();
        ?>
<!-- Header -->
<div class="invoice-header">
	<table style="width: 100%;">
		<tr>
			<td style="width: 40%; vertical-align: top;">
				<div class="company-info">
					<h2>INVOICE</h2>
					<strong><?= htmlspecialchars($company->company_name) ?></strong><br>
					<?php if ($company->company_address): ?>
					<?php foreach (explode("\n", $company->company_address) as $line): ?>
					<?php $line = trim($line); if (!empty($line)): ?>
					<?= htmlspecialchars($line) ?><br>
					<?php endif; ?>
					<?php endforeach; ?>
					<?php endif; ?>
					<?php 
						$companyLocationParts = [];
						if ($company->city) $companyLocationParts[] = $company->city;
						if ($company->state) $companyLocationParts[] = $company->state;
						if ($company->zip_code) $companyLocationParts[] = $company->zip_code;
						if (!empty($companyLocationParts)): 
					?>
					<?= htmlspecialchars(implode(', ', $companyLocationParts)) ?><br>
					<?php endif; ?>
					<?php if ($company->country && $company->country !== 'US'): ?>
					<?= htmlspecialchars($company->country) ?><br>
					<?php endif; ?>
					<?php if ($company->company_phone): ?>
					Phone: <?= htmlspecialchars($company->company_phone) ?><br>
					<?php endif; ?>
					<?php if ($company->company_email): ?>
					Email: <?= htmlspecialchars($company->company_email) ?>
					<?php endif; ?>
				</div>
			</td>
			<td style="width: 20%;">&nbsp;</td>
			<td style="width: 40%; text-align: right; vertical-align: top;">
				<div class="logo-section">
					<?php if ($company->hasLogo()): ?>
					<img src="<?= $company->getLogoUrl() ?>" alt="Company Logo" class="logo" style="max-height: 120px; max-width: 720px; height: auto;">
					<?php endif; ?>
				</div>
			</td>
		</tr>
	</table>
</div>
<?php
        return ob_get_clean();
    }

    /**
     * Generate preview sub-header section
     *
     * @param $customer
     * @param $invoice
     * @param $company
     * @return string
     */
    private static function generatePreviewSubHeader($customer, $invoice, $company)
    {
        ob_start();
        ?>
<!-- Sub Header with 3 columns -->
<div class="sub-header">
	<table>
		<tr>
			<td class="sub-header-column">
				<div class="bill-to">
					<strong>Bill To:</strong><br>
					<strong><?= htmlspecialchars($customer->customer_name) ?></strong><br>
					<?php if ($customer->customer_address): ?>
					<?php foreach (explode("\n", $customer->customer_address) as $line): ?>
					<?php $line = trim($line); if (!empty($line)): ?>
					<?= htmlspecialchars($line) ?><br>
					<?php endif; ?>
					<?php endforeach; ?>
					<?php endif; ?>
					<?php 
						$locationParts = [];
						if ($customer->city) $locationParts[] = $customer->city;
						if ($customer->state) $locationParts[] = $customer->state;
						if ($customer->zip_code) $locationParts[] = $customer->zip_code;
						if (!empty($locationParts)): 
					?>
					<?= htmlspecialchars(implode(', ', $locationParts)) ?><br>
					<?php endif; ?>
					<?php if ($customer->country && $customer->country !== 'US'): ?>
					<?= htmlspecialchars($customer->country) ?><br>
					<?php endif; ?>
					<?php if ($customer->customer_phone): ?>
					Phone: <?= htmlspecialchars($customer->customer_phone) ?><br>
					<?php endif; ?>
					<?php if ($customer->customer_fax): ?>
					Fax: <?= htmlspecialchars($customer->customer_fax) ?><br>
					<?php endif; ?>
					<?php if ($customer->customer_mobile): ?>
					Mobile: <?= htmlspecialchars($customer->customer_mobile) ?><br>
					<?php endif; ?>
					<?php if ($customer->customer_email): ?>
					Email: <?= htmlspecialchars($customer->customer_email) ?>
					<?php endif; ?>
				</div>
			</td>
			<td class="sub-header-column">
				<div class="ship-to">
					<strong>Ship To:</strong><br>
					<strong><?= htmlspecialchars($customer->customer_name) ?></strong><br>
					<?php if ($customer->customer_address): ?>
					<?php foreach (explode("\n", $customer->customer_address) as $line): ?>
					<?php $line = trim($line); if (!empty($line)): ?>
					<?= htmlspecialchars($line) ?><br>
					<?php endif; ?>
					<?php endforeach; ?>
					<?php endif; ?>
					<?php 
						$locationParts = [];
						if ($customer->city) $locationParts[] = $customer->city;
						if ($customer->state) $locationParts[] = $customer->state;
						if ($customer->zip_code) $locationParts[] = $customer->zip_code;
						if (!empty($locationParts)): 
					?>
					<?= htmlspecialchars(implode(', ', $locationParts)) ?><br>
					<?php endif; ?>
					<?php if ($customer->country && $customer->country !== 'US'): ?>
					<?= htmlspecialchars($customer->country) ?><br>
					<?php endif; ?>
				</div>
			</td>
			<td class="sub-header-column">
				<div style="background: none; padding: 0; margin: 0;">
					<table>
						<tr>
							<td><strong>Invoice #:</strong></td>
							<td><?= htmlspecialchars($invoice->invoice_number) ?></td>
						</tr>
						<tr>
							<td><strong>Date:</strong></td>
							<td><?= date('F j, Y', strtotime($invoice->invoice_date)) ?></td>
						</tr>
						<?php if ($invoice->due_date): ?>
						<tr>
							<td><strong>Due Date:</strong></td>
							<td><?= date('F j, Y', strtotime($invoice->due_date)) ?></td>
						</tr>
						<?php endif; ?>
						<tr>
							<td><strong>Terms:</strong></td>
							<td>Net <?= $company->due_date_days ?> Days</td>
						</tr>
					</table>
				</div>
			</td>
		</tr>
	</table>
</div>
<?php
        return ob_get_clean();
    }

    /**
     * Generate preview separator
     *
     * @return string
     */
    private static function generatePreviewSeparator()
    {
        return '<!-- Separator --><div class="separator"></div>';
    }

    /**
     * Generate preview items table
     *
     * @param $items
     * @param $invoice
     * @return string
     */
    private static function generatePreviewItemsTable($items, $invoice)
    {
        ob_start();
        ?>
<table class="items-table">
	<thead>
		<tr>
			<th style="width: 70%;">Description</th>
			<th style="width: 10%; text-align: ;">Quantity</th>
			<th style="width: 10%; text-align: right;">Rate</th>
			<th style="width: 10%; text-align: right;">Amount</th>
		</tr>
	</thead>
	<tbody>
		<?php foreach ($items as $item): ?>
		<tr>
			<td>
				<?php if (!empty($item->product_service_name)): ?>
				<strong><?= htmlspecialchars($item->product_service_name) ?></strong>
				<?php if (!empty($item->description)): ?>
				<br><small><?= htmlspecialchars($item->description) ?></small>
				<?php endif; ?>
				<?php elseif (!empty($item->description)): ?>
				<?= htmlspecialchars($item->description) ?>
				<?php endif; ?>
			</td>
			<td style="text-align: right;"><?= $item->getFormattedQuantity() ?></td>
			<td class="text-right"><?= $invoice->formatAmount($item->rate) ?></td>
			<td class="text-right"><?= $invoice->formatAmount($item->amount) ?></td>
		</tr>
		<?php endforeach; ?>
	</tbody>
</table>
<?php
        return ob_get_clean();
    }

    /**
     * Generate preview totals section
     *
     * @param $invoice
     * @return string
     */
    private static function generatePreviewTotalsSection($invoice)
    {
        ob_start();
        ?>
<div class="totals-section">
	<table class="totals-table">
		<tr>
			<td><strong>Subtotal:</strong></td>
			<td class="text-right"><?= $invoice->formatAmount($invoice->subtotal) ?></td>
		</tr>
		<tr>
			<td><strong>Tax (<?= number_format($invoice->tax_rate, 1) ?>%):</strong></td>
			<td class="text-right"><?= $invoice->formatAmount($invoice->tax_amount) ?></td>
		</tr>
		<tr class="total-row">
			<td><strong>TOTAL:</strong></td>
			<td class="text-right"><?= $invoice->formatAmount($invoice->total_amount) ?></td>
		</tr>

		<?php $totalPaid = $invoice->getTotalPaidAmount(); ?>
		<?php if ($totalPaid > 0): ?>
		<tr style="background-color: #e8f5e8;">
			<td><strong>PAID:</strong></td>
			<td class="text-right" style="color: #28a745; font-weight: bold;">
				-<?= $invoice->formatAmount($totalPaid) ?>
			</td>
		</tr>
		<?php endif; ?>

		<?php if ($totalPaid > 0): ?>
		<?php $remainingBalance = $invoice->getRemainingBalance(); ?>
		<tr style="background-color: <?= $remainingBalance > 0 ? '#fff3cd' : '#d4edda' ?>;">
			<td><strong>BALANCE DUE:</strong></td>
			<td class="text-right"
				style="font-size: 16px; font-weight: bold; color: <?= $remainingBalance > 0 ? '#856404' : '#155724' ?>;">
				<?= $invoice->formatAmount($remainingBalance) ?>
			</td>
		</tr>
		<?php endif; ?>
	</table>
</div>
<?php
        return ob_get_clean();
    }

    /**
     * Generate preview notes section
     *
     * @param $invoice
     * @return string
     */
    private static function generatePreviewNotes($invoice)
    {
        if ($invoice->notes) {
            return '
            <div class="notes-section">
                <strong>Notes:</strong><br>
                ' . nl2br(htmlspecialchars($invoice->notes)) . '
            </div>';
        }
        return '';
    }

    /**
     * Generate preview footer
     *
     * @return string
     */
    private static function generatePreviewFooter()
    {
        return '
        <div style="margin-top: 40px; text-align: center; font-size: 12px; color: #666; border-top: 1px solid #eee; padding-top: 20px;">
            Generated by ' . (\Yii::$app->params['siteName'] ?? 'Invoice Manager') . ' on ' . date('F j, Y \a\t g:i A') . '
        </div>';
    }

    /**
     * Generate estimate preview HTML (for web display)
     *
     * @param Estimate $estimate
     * @return string
     */
    public static function generateEstimatePreviewHtml(Estimate $estimate)
    {
        $company = $estimate->company;
        $customer = $estimate->customer;
        $items = $estimate->estimateItems;

        ob_start();
        ?>
<div class="estimate-preview-container"
	style="max-width: 1000px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif; position: relative;">

	<?php echo self::getPreviewStyles(); ?>

	<?php echo self::generateEstimatePreviewHeader($company); ?>
	<?php echo self::generateEstimatePreviewSubHeader($customer, $estimate, $company); ?>
	<?php echo self::generatePreviewSeparator(); ?>
	<?php echo self::generateEstimatePreviewItemsTable($items, $estimate); ?>
	<?php echo self::generateEstimatePreviewTotalsSection($estimate); ?>
	<?php echo self::generateEstimatePreviewNotes($estimate); ?>
	<?php echo self::generatePreviewFooter(); ?>

</div>
<?php
        return ob_get_clean();
    }

    /**
     * Generate estimate preview header section
     *
     * @param $company
     * @return string
     */
    private static function generateEstimatePreviewHeader($company)
    {
        ob_start();
        ?>
<!-- Header -->
<div class="invoice-header">
	<table style="width: 100%;">
		<tr>
			<td style="width: 40%; vertical-align: top;">
				<div class="company-info">
					<h2>ESTIMATE</h2>
					<strong><?= htmlspecialchars($company->company_name) ?></strong><br>
					<?php if ($company->company_address): ?>
					<?php foreach (explode("\n", $company->company_address) as $line): ?>
					<?php $line = trim($line); if (!empty($line)): ?>
					<?= htmlspecialchars($line) ?><br>
					<?php endif; ?>
					<?php endforeach; ?>
					<?php endif; ?>
					<?php if ($company->company_phone): ?>
					Phone: <?= htmlspecialchars($company->company_phone) ?><br>
					<?php endif; ?>
					<?php if ($company->company_email): ?>
					Email: <?= htmlspecialchars($company->company_email) ?>
					<?php endif; ?>
				</div>
			</td>
			<td style="width: 20%;">&nbsp;</td>
			<td style="width: 40%; text-align: right; vertical-align: top;">
				<div class="logo-section">
					<?php if ($company->hasLogo()): ?>
					<img src="<?= $company->getLogoUrl() ?>" alt="Company Logo" class="logo" style="max-height: 120px; max-width: 720px; height: auto;">
					<?php endif; ?>
				</div>
			</td>
		</tr>
	</table>
</div>
<?php
        return ob_get_clean();
    }

    /**
     * Generate estimate preview sub-header section
     *
     * @param $customer
     * @param $estimate
     * @param $company
     * @return string
     */
    private static function generateEstimatePreviewSubHeader($customer, $estimate, $company)
    {
        ob_start();
        ?>
<!-- Sub Header with 3 columns -->
<div class="sub-header">
	<table>
		<tr>
			<td class="sub-header-column">
				<div class="bill-to">
					<strong>Bill To:</strong><br>
					<strong><?= htmlspecialchars($customer->customer_name) ?></strong><br>
					<?php if ($customer->customer_address): ?>
					<?php foreach (explode("\n", $customer->customer_address) as $line): ?>
					<?php $line = trim($line); if (!empty($line)): ?>
					<?= htmlspecialchars($line) ?><br>
					<?php endif; ?>
					<?php endforeach; ?>
					<?php endif; ?>
					<?php 
						$locationParts = [];
						if ($customer->city) $locationParts[] = $customer->city;
						if ($customer->state) $locationParts[] = $customer->state;
						if ($customer->zip_code) $locationParts[] = $customer->zip_code;
						if (!empty($locationParts)): 
					?>
					<?= htmlspecialchars(implode(', ', $locationParts)) ?><br>
					<?php endif; ?>
					<?php if ($customer->country && $customer->country !== 'US'): ?>
					<?= htmlspecialchars($customer->country) ?><br>
					<?php endif; ?>
					<?php if ($customer->customer_phone): ?>
					Phone: <?= htmlspecialchars($customer->customer_phone) ?><br>
					<?php endif; ?>
					<?php if ($customer->customer_email): ?>
					Email: <?= htmlspecialchars($customer->customer_email) ?>
					<?php endif; ?>
				</div>
			</td>
			<td class="sub-header-column">
				<div class="ship-to">
					<strong>Ship To:</strong><br>
					<?php if ($estimate->ship_to_address): ?>
					<?= nl2br(htmlspecialchars($estimate->ship_to_address)) ?>
					<?php else: ?>
					<strong><?= htmlspecialchars($customer->customer_name) ?></strong><br>
					<?php if ($customer->customer_address): ?>
					<?php foreach (explode("\n", $customer->customer_address) as $line): ?>
					<?php $line = trim($line); if (!empty($line)): ?>
					<?= htmlspecialchars($line) ?><br>
					<?php endif; ?>
					<?php endforeach; ?>
					<?php endif; ?>
					<?php endif; ?>
				</div>
			</td>
			<td class="sub-header-column">
				<div style="background: none; padding: 0; margin: 0;">
					<table>
						<tr>
							<td><strong>Estimate #:</strong></td>
							<td><?= htmlspecialchars($estimate->estimate_number) ?></td>
						</tr>
						<tr>
							<td><strong>Date:</strong></td>
							<td><?= date('F j, Y', strtotime($estimate->estimate_date)) ?></td>
						</tr>
						<?php if ($estimate->expiry_date): ?>
						<tr>
							<td><strong>Expiry Date:</strong></td>
							<td><?= date('F j, Y', strtotime($estimate->expiry_date)) ?></td>
						</tr>
						<?php endif; ?>
						<?php if ($estimate->terms): ?>
						<tr>
							<td><strong>Terms:</strong></td>
							<td><?= htmlspecialchars($estimate->terms) ?></td>
						</tr>
						<?php endif; ?>
					</table>
				</div>
			</td>
		</tr>
	</table>
</div>
<?php
        return ob_get_clean();
    }

    /**
     * Generate estimate preview items table
     *
     * @param $items
     * @param $estimate
     * @return string
     */
    private static function generateEstimatePreviewItemsTable($items, $estimate)
    {
        ob_start();
        ?>
<table class="items-table">
	<thead>
		<tr>
			<th style="width: 70%;">Description</th>
			<th style="width: 10%; text-align: center;">Quantity</th>
			<th style="width: 10%; text-align: right;">Rate</th>
			<th style="width: 10%; text-align: right;">Amount</th>
		</tr>
	</thead>
	<tbody>
		<?php foreach ($items as $item): ?>
		<tr>
			<td>
				<?php if (!empty($item->product_service_name)): ?>
				<strong><?= htmlspecialchars($item->product_service_name) ?></strong>
				<?php if (!empty($item->description)): ?>
				<br><small><?= htmlspecialchars($item->description) ?></small>
				<?php endif; ?>
				<?php elseif (!empty($item->description)): ?>
				<?= htmlspecialchars($item->description) ?>
				<?php endif; ?>
			</td>
			<td style="text-align: center;"><?= $item->getFormattedQuantity() ?></td>
			<td class="text-right"><?= $estimate->formatAmount($item->rate) ?></td>
			<td class="text-right"><?= $estimate->formatAmount($item->amount) ?></td>
		</tr>
		<?php endforeach; ?>
	</tbody>
</table>
<?php
        return ob_get_clean();
    }

    /**
     * Generate estimate preview totals section
     *
     * @param $estimate
     * @return string
     */
    private static function generateEstimatePreviewTotalsSection($estimate)
    {
        ob_start();
        ?>
<div class="totals-section">
	<table class="totals-table">
		<tr>
			<td><strong>Subtotal:</strong></td>
			<td class="text-right"><?= $estimate->formatAmount($estimate->subtotal) ?></td>
		</tr>
		<?php if ($estimate->discount_amount > 0): ?>
		<tr>
			<td>
				<strong>Discount
					<?php if ($estimate->discount_type == 'percentage'): ?>
					(<?= $estimate->discount_value ?>%):
					<?php else: ?>
					(Fixed):
					<?php endif; ?>
				</strong>
			</td>
			<td class="text-right" style="color: #dc3545;">-<?= $estimate->formatAmount($estimate->discount_amount) ?>
			</td>
		</tr>
		<?php endif; ?>
		<?php if ($estimate->tax_amount > 0): ?>
		<tr>
			<td><strong>Tax (<?= number_format($estimate->tax_rate, 1) ?>%):</strong></td>
			<td class="text-right"><?= $estimate->formatAmount($estimate->tax_amount) ?></td>
		</tr>
		<?php endif; ?>
		<tr class="total-row">
			<td><strong>TOTAL:</strong></td>
			<td class="text-right"><?= $estimate->formatAmount($estimate->total_amount) ?></td>
		</tr>
	</table>
</div>
<?php
        return ob_get_clean();
    }

    /**
     * Generate estimate preview notes section
     *
     * @param $estimate
     * @return string
     */
    private static function generateEstimatePreviewNotes($estimate)
    {
        $html = '';
        
        if ($estimate->customer_notes) {
            $html .= '
            <div class="notes-section">
                <strong>Notes:</strong><br>
                ' . nl2br(htmlspecialchars($estimate->customer_notes)) . '
            </div>';
        }
        
        if ($estimate->payment_instructions) {
            $html .= '
            <div class="notes-section">
                <strong>Payment Instructions:</strong><br>
                ' . nl2br(htmlspecialchars($estimate->payment_instructions)) . '
            </div>';
        }
        
        if ($estimate->expiry_date) {
            $html .= '
            <div style="margin-top: 30px; padding: 15px; background: #fff3cd; border-left: 4px solid #ffc107; border-radius: 4px;">
                <strong>This estimate is valid until ' . date('F j, Y', strtotime($estimate->expiry_date)) . '</strong>
            </div>';
        }
        
        return $html;
    }

    /**
     * Generate PDF for estimate
     *
     * @param Estimate $estimate
     * @param string $mode 'D' for download, 'I' for inline, 'S' for string
     * @return mixed
     */
    public static function generateEstimatePdf(Estimate $estimate, $mode = 'I')
    {
        // Create new PDF document using custom class
        $pdf = new InvoicePDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
        
        // Set CJK font preference for footer
        $pdf->useCJKFont = $estimate->company->use_cjk_font;
        
        // Set Korean language support
        $pdf->setLanguageArray(array('a_meta_charset' => 'UTF-8'));
        
        // Set Unicode font subsetting to support Korean characters
        $pdf->setFontSubsetting(true);

        // Set document information
        $pdf->SetCreator(\Yii::$app->params['siteName'] ?? 'Invoice Manager');
        $pdf->SetAuthor($estimate->company->company_name);
        $pdf->SetTitle('Estimate ' . $estimate->estimate_number);
        $pdf->SetSubject('Estimate');

        // Remove default header but enable custom footer
        $pdf->setPrintHeader(false);
        $pdf->setPrintFooter(true);

        // Set margins (top, left, right)
        $pdf->SetMargins(15, 15, 15);
        
        // Set auto page break with bottom margin for footer
        $pdf->SetAutoPageBreak(true, 25);

        // Add a page
        $pdf->AddPage();

        // Set default font based on company CJK setting
        if ($estimate->company->use_cjk_font) {
            self::setCJKFont($pdf);
        } else {
            $pdf->SetFont('helvetica', '', 9);
        }

        // Generate HTML content
        $html = self::generateEstimateHtml($estimate);

        // Print the HTML content
        $pdf->writeHTML($html, true, false, true, false, '');

        // Get filename
        $filename = 'Estimate_' . $estimate->estimate_number . '.pdf';

        // Output the PDF
        return $pdf->Output($filename, $mode);
    }

    /**
     * Generate HTML content for estimate (PDF version)
     *
     * @param Estimate $estimate
     * @return string
     */
    private static function generateEstimateHtml(Estimate $estimate)
    {
        $company = $estimate->company;
        $customer = $estimate->customer;
        $items = $estimate->estimateItems;

        // CSS Styles for PDF
        $css = self::getPdfStyles($company->use_cjk_font);
        
        // HTML Content
        $html = $css;
        $html .= self::generateEstimatePdfHeader($company);
        $html .= self::generateEstimatePdfSubHeader($customer, $estimate, $company);
        $html .= self::generatePdfSeparator();
        $html .= self::generateEstimatePdfItemsTable($items, $estimate);
        $html .= self::generateEstimatePdfTotalsSection($estimate);
        $html .= self::generateEstimatePdfNotes($estimate);

        return $html;
    }

    /**
     * Generate estimate PDF header section
     *
     * @param $company
     * @return string
     */
    private static function generateEstimatePdfHeader($company)
    {
        $html = '
        <!-- Header -->
        <div class="header">
            <table width="100%">
                <tr>
                    <td width="40%" class="company-info">
                        <div class="invoice-title">ESTIMATE</div>
                        <strong>' . htmlspecialchars($company->company_name) . '</strong><br>';
        
        // Process company address line by line
        if ($company->company_address) {
            $addressLines = explode("\n", $company->company_address);
            foreach ($addressLines as $line) {
                $line = trim($line);
                if (!empty($line)) {
                    $html .= htmlspecialchars($line) . '<br>';
                }
            }
        }

        if ($company->company_phone) {
            $html .= 'Phone: ' . htmlspecialchars($company->company_phone) . '<br>';
        }
        if ($company->company_email) {
            $html .= 'Email: ' . htmlspecialchars($company->company_email) . '<br>';
        }

        $html .= '
                    </td>
                    <td width="20%">&nbsp;</td>
                    <td width="40%" style="text-align: right;">';

        // Add logo if exists
        if ($company->hasLogo()) {
            $logoPath = $company->getLogoAbsolutePath();
            if ($logoPath && file_exists($logoPath)) {
                // Get image dimensions
                $imageInfo = getimagesize($logoPath);
                if ($imageInfo) {
                    $originalWidth = $imageInfo[0];
                    $originalHeight = $imageInfo[1];
                    
                    // Calculate new dimensions with max height of 120px (15px * 8)
                    $maxHeight = 120;
                    $maxWidth = 720;
                    
                    $ratio = min($maxHeight / $originalHeight, $maxWidth / $originalWidth);
                    $newWidth = $originalWidth * $ratio;
                    $newHeight = $originalHeight * $ratio;
                    
                    $html .= '<img src="' . $logoPath . '" width="' . $newWidth . '" height="' . $newHeight . '" alt="Company Logo">';
                } else {
                    $html .= '<img src="' . $logoPath . '" width="720" height="120" alt="Company Logo">';
                }
            }
        }

        $html .= '
                    </td>
                </tr>
            </table>
        </div>';

        return $html;
    }

    /**
     * Generate estimate PDF sub-header section
     *
     * @param $customer
     * @param $estimate
     * @param $company
     * @return string
     */
    private static function generateEstimatePdfSubHeader($customer, $estimate, $company)
    {
        $html = '
        <!-- Sub Header with 3 columns -->
        <div class="sub-header">
            <table width="100%">
                <tr>
                    <td width="33%" style="vertical-align: top; padding: 0;">
                        <div style="background: none; padding: 0; margin: 0;">
                            <strong>Bill To:</strong><br>
                            <strong>' . htmlspecialchars($customer->customer_name) . '</strong><br>';
        // Process customer billing address using structured fields first, then fallback to address field
        if ($customer->customer_address) {
            $addressLines = explode("\n", $customer->customer_address);
            foreach ($addressLines as $line) {
                $line = trim($line);
                if (!empty($line)) {
                    $html .= '&nbsp; '.htmlspecialchars($line) . '<br>';
                }
            }
        }
        // Add structured location information
        $locationParts = [];
        if ($customer->city) $locationParts[] = $customer->city;
        if ($customer->state) $locationParts[] = $customer->state;
        if ($customer->zip_code) $locationParts[] = $customer->zip_code;
        if (!empty($locationParts)) {
            $html .= '&nbsp; ' . htmlspecialchars(implode(', ', $locationParts)) . '<br>';
        }
        if ($customer->country && $customer->country !== 'US') {
            $html .= '&nbsp; ' . htmlspecialchars($customer->country) . '<br>';
        }
        if ($customer->customer_phone) {
            $html .= '&nbsp; Phone: ' . htmlspecialchars($customer->customer_phone) . '<br>';
        }
        if ($customer->customer_email) {
            $html .= '&nbsp; Email: ' . htmlspecialchars($customer->customer_email) . '<br>';
        }

        $html .= '
                        </div>
                    </td>
                    <td width="33%" style="vertical-align: top; padding: 0;">
                        <div style="background: none; padding: 0; margin: 0;">
                            <strong>Ship To:</strong><br>';
        
        if ($estimate->ship_to_address) {
            $shipLines = explode("\n", $estimate->ship_to_address);
            foreach ($shipLines as $line) {
                $line = trim($line);
                if (!empty($line)) {
                    $html .= '&nbsp; '.htmlspecialchars($line) . '<br>';
                }
            }
        } else {
            $html .= '<strong>' . htmlspecialchars($customer->customer_name) . '</strong><br>';
            if ($customer->customer_address) {
                $addressLines = explode("\n", $customer->customer_address);
                foreach ($addressLines as $line) {
                    $line = trim($line);
                    if (!empty($line)) {
                        $html .= '&nbsp; '.htmlspecialchars($line) . '<br>';
                    }
                }
            }
            // Add structured location information
            $locationParts = [];
            if ($customer->city) $locationParts[] = $customer->city;
            if ($customer->state) $locationParts[] = $customer->state;
            if ($customer->zip_code) $locationParts[] = $customer->zip_code;
            if (!empty($locationParts)) {
                $html .= '&nbsp; ' . htmlspecialchars(implode(', ', $locationParts)) . '<br>';
            }
            if ($customer->country && $customer->country !== 'US') {
                $html .= '&nbsp; ' . htmlspecialchars($customer->country) . '<br>';
            }
        }

        $html .= '
                        </div>
                    </td>
                    <td width="34%" style="vertical-align: top; padding: 0;">
                        <div style="background: none; padding: 0; margin: 0;">
                            <table>
                                <tr>
                                    <td><strong>Estimate #:</strong></td>
                                    <td>' . htmlspecialchars($estimate->estimate_number) . '</td>
                                </tr>
                                <tr>
                                    <td><strong>Date:</strong></td>
                                    <td>' . date('F j, Y', strtotime($estimate->estimate_date)) . '</td>
                                </tr>';

        if ($estimate->expiry_date) {
            $html .= '
                                <tr>
                                    <td><strong>Expiry Date:</strong></td>
                                    <td>' . date('F j, Y', strtotime($estimate->expiry_date)) . '</td>
                                </tr>';
        }

        if ($estimate->terms) {
            $html .= '
                                <tr>
                                    <td><strong>Terms:</strong></td>
                                    <td>' . htmlspecialchars($estimate->terms) . '</td>
                                </tr>';
        }

        $html .= '
                            </table>
                        </div>
                    </td>
                </tr>
            </table>
        </div>';

        return $html;
    }

    /**
     * Generate estimate PDF items table
     *
     * @param $items
     * @param $estimate
     * @return string
     */
    private static function generateEstimatePdfItemsTable($items, $estimate)
    {
        $html = '
        <table class="items-table" cellpadding="8" cellspacing="0">
            <thead>
                <tr>
                    <th style="width: 50%;">Description</th>
                    <th style="width: 15%; text-align: right;">Quantity</th>
                    <th style="width: 17.5%; text-align: right;">Rate</th>
                    <th style="width: 17.5%; text-align: right;">Amount</th>
                </tr>
            </thead>
            <tbody>';

        foreach ($items as $item) {
            $description = '';
            
            // Add Product/Service name if exists
            if (!empty($item->product_service_name)) {
                $description .= '<span style="font-family: kozgopromedium, DejaVu Sans, FreeSerif;"><strong>' . htmlspecialchars($item->product_service_name) . '</strong></span>';
                if (!empty($item->description)) {
                    $description .= '<br><span style="font-family: kozgopromedium, DejaVu Sans, FreeSerif;">' . htmlspecialchars($item->description) . '</span>';
                }
            } else if (!empty($item->description)) {
                $description = '<span style="font-family: kozgopromedium, DejaVu Sans, FreeSerif;">' . htmlspecialchars($item->description) . '</span>';
            }
            
            $html .= '
                <tr>
                    <td style="width:50%;">&nbsp;' . $description . '&nbsp;</td>
                    <td style="width:15%;text-align: right;">&nbsp;' . $item->getFormattedQuantity() . '&nbsp;</td>
                    <td style="width:17.5%;text-align: right;">&nbsp;' . $estimate->formatAmount($item->rate) . '&nbsp;</td>
                    <td style="width:17.5%;text-align: right;">&nbsp;' . $estimate->formatAmount($item->amount) . '&nbsp;</td>
                </tr>';
        }

        $html .= '
            </tbody>
        </table>';

        return $html;
    }

    /**
     * Generate estimate PDF totals section
     *
     * @param $estimate
     * @return string
     */
    private static function generateEstimatePdfTotalsSection($estimate)
    {
        $html = '
        <div class="totals">
            <table width="100%">
                <tr>
                    <td width="60%">&nbsp;</td>
                    <td width="40%">
                        <table class="totals-table" width="100%" cellpadding="6" cellspacing="0">
                <tr>
                    <td>&nbsp;<strong>Subtotal:</strong>&nbsp;</td>
                    <td style="text-align: right;">&nbsp;' . $estimate->formatAmount($estimate->subtotal) . '&nbsp;</td>
                </tr>';

        if ($estimate->discount_amount > 0) {
            $discountLabel = 'Discount';
            if ($estimate->discount_type == 'percentage') {
                $discountLabel .= ' (' . $estimate->discount_value . '%)';
            } else {
                $discountLabel .= ' (Fixed)';
            }
            $html .= '
                <tr>
                    <td>&nbsp;<strong>' . $discountLabel . ':</strong>&nbsp;</td>
                    <td style="text-align: right; color: #dc3545;">&nbsp;-' . $estimate->formatAmount($estimate->discount_amount) . '&nbsp;</td>
                </tr>';
        }

        if ($estimate->tax_amount > 0) {
            $html .= '
                <tr>
                    <td>&nbsp;<strong>Tax (' . number_format($estimate->tax_rate, 1) . '%):</strong>&nbsp;</td>
                    <td style="text-align: right;">&nbsp;' . $estimate->formatAmount($estimate->tax_amount) . '&nbsp;</td>
                </tr>';
        }

        $html .= '
                <tr class="total-row">
                    <td>&nbsp;<strong>TOTAL:</strong>&nbsp;</td>
                    <td style="text-align: right; font-size: 11px;">&nbsp;' . $estimate->formatAmount($estimate->total_amount) . '&nbsp;</td>
                </tr>
                        </table>
                    </td>
                </tr>
            </table>
        </div>';

        return $html;
    }

    /**
     * Generate estimate PDF notes section
     *
     * @param $estimate
     * @return string
     */
    private static function generateEstimatePdfNotes($estimate)
    {
        $html = '';
        
        if ($estimate->customer_notes) {
            $html .= '
        <div class="notes">
            <strong>Notes:</strong><br>
            ' . nl2br(htmlspecialchars($estimate->customer_notes)) . '
        </div>';
        }
        
        if ($estimate->payment_instructions) {
            $html .= '
        <div class="notes">
            <strong>Payment Instructions:</strong><br>
            ' . nl2br(htmlspecialchars($estimate->payment_instructions)) . '
        </div>';
        }
        
        if ($estimate->expiry_date) {
            $html .= '
        <div class="notes">
            <strong>Validity:</strong><br>
            This estimate is valid until ' . date('F j, Y', strtotime($estimate->expiry_date)) . '
        </div>';
        }
        
        return $html;
    }
}